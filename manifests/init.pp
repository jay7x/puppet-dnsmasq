# @summary Manage dnsmasq
#
# @example Basic usage
#   include dnsmasq
#
# @param binary_path
#   Location of the `dnsmasq` binary.
# @param config_dir
#   Directory where configuration files generated by the module defined
#   resources are stored.
# @param config_file
#   Path to the main dnsmasq configuration file.
# @param configs_hash
#   A hash of configuration fragments to be managed using the `dnsmasq::conf`
#   defined resource.
# @param dhcp_hosts_hash
#   A hash of static DHCP host definitions to be used with
#   `dnsmasq::dhcp_host` defined resource.
# @param hosts_hash
#   A hash of host records to be managed with `dnsmasq::host` defined resource.
# @param package_ensure
#   Whether the dnsmasq package should be installed or removed.
# @param package_name
#   Name of the dnsmasq package.
# @param purge_config_dir
#   Whether to purge unmanaged files from the configuration directory.
# @param reload_command
#   Command to execute when dnsmasq configuration reload is required.
# @param service_control
#   Whether the dnsmasq service should be managed by Puppet.
# @param service_ensure
#   Whether the dnsmasq service should be running or stopped.
# @param service_enable
#   Whether the dnsmasq service should be enabled to start at boot.
# @param service_name
#   Name of the dnsmasq service.
#
class dnsmasq (
  Stdlib::Absolutepath       $binary_path      = '/usr/sbin/dnsmasq',
  Stdlib::Absolutepath       $config_dir       = '/etc/dnsmasq.d',
  Stdlib::Absolutepath       $config_file      = '/etc/dnsmasq.conf',
  String[1]                  $package_ensure   = 'installed',
  String[1]                  $package_name     = 'dnsmasq',
  Boolean                    $purge_config_dir = false,
  Boolean                    $service_control  = true,
  Enum['running', 'stopped'] $service_ensure   = 'running',
  Boolean                    $service_enable   = true,
  String[1]                  $service_name     = 'dnsmasq',
  String[1]                  $reload_command   = "/usr/bin/systemctl reload ${service_name}",
  # Resource hashes
  Hash[String[1], Dnsmasq::Params::Conf]      $configs_hash    = {},
  Hash[String[1], Dnsmasq::Params::Dhcp_host] $dhcp_hosts_hash = {},
  Hash[String[1], Dnsmasq::Params::Host]      $hosts_hash      = {},
) {
  contain dnsmasq::install
  contain dnsmasq::config
  contain dnsmasq::service
  include dnsmasq::reload

  # Collect all dnsmasq::host's file_line resources
  if $settings::storeconfigs {
    File_line <<| tag == 'dnsmasq-host' |>>
  }

  $configs_hash.each |String[1] $cname, Hash $config| {
    dnsmasq::conf { $cname:
      * => $config,
    }
  }

  $hosts_hash.each |String[1] $hname, Hash $config| {
    dnsmasq::host { $hname:
      * => $config,
    }
  }

  $dhcp_hosts_hash.each |String[1] $hname, Hash $config| {
    dnsmasq::dhcp_host { $hname:
      * => $config,
    }
  }

  Class['dnsmasq::install'] -> Class['dnsmasq::config']
  Class['dnsmasq::install'] -> Class['dnsmasq::service']
  Class['dnsmasq::config'] ~> Class['dnsmasq::service']
  Class['dnsmasq::reload'] -> Class['dnsmasq::service']
}
